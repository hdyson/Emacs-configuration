* Package configuration

Package configuration typically needs to be first - if it's not, any
configuration (e.g. keybindings) that needs a package to have been loaded will
cause an error when starting emacs.

** Initial setup

Initialises the package interface and defines the stable source (I don't see
the point in using the bleeding edge).

#+BEGIN_SRC emacs-lisp

(require 'package) 
(add-to-list 'package-archives
             '("melpa-stable" . "https://stable.melpa.org/packages/"))
(package-initialize)

(when (not package-archive-contents)
  (package-refresh-contents))

#+END_SRC

Now define which packages we want to actually install and use:

#+BEGIN_SRC emacs-lisp
(defvar myPackages
  '(elpy  ;; https://github.com/jorgenschaefer/elpy
    flycheck  ;; elpy dependency
    py-autopep8  ;; elpy dependency
    iedit  ;; elpy dependency
    magit ;; https://github.com/magit/
    markdown-mode  ;; https://jblevins.org/projects/markdown-mode/
    multiple-cursors  ;; https://github.com/magnars/multiple-cursors.el
    which-key  ;; https://github.com/justbur/emacs-which-key
    ))
#+END_SRC

For each of the previous packages, install them if they're not already
installed:

#+BEGIN_SRC emacs-lisp
(mapc #'(lambda (package)
    (unless (package-installed-p package)
      (package-install package)))
      myPackages)
#+END_SRC

* Basic configuration

Set desktop mode for restoring buffers across emacs sessions
#+BEGIN_SRC emacs-lisp
(desktop-save-mode 1)
(setq desktop-path '("~/.emacs.d/desktop" "~/.emacs.d/" "~"))
#+END_SRC
Setup some defaults - put point on variable and do C-h v to find
appropriate docs quickly.
#+BEGIN_SRC emacs-lisp
(setq-default fill-column 78)
(setq default-major-mode 'text-mode)
(tool-bar-mode 0)
(column-number-mode t)
;; change all prompts to y or n
(fset 'yes-or-no-p 'y-or-n-p)

;; Show file path in frame title
(setq-default frame-title-format "%b (%f)")

;; Working on parts of text
;; ------------------------
;; NB: `C-x n n' is narrow-to-region
;;     `C-x n p' is narrow-to-page
;;     `C-x n w' is widen
(put 'narrow-to-region 'disabled nil)
(put 'narrow-to-page   'disabled nil)
(put 'upcase-region 'disabled nil)
(put 'downcase-region 'disabled nil)
(put 'scroll-left 'disabled nil)

;; ido mode to accelerate changing file/buffer.  See
;; http://www.cua.dk/ido.html
(require 'ido)
(setq ido-enable-flex-matching t)
(setq ido-everywhere t)
(setq ido-use-filename-at-point 'guess)
(ido-mode t)

;; Some default settings could be better.
(setq confirm-kill-emacs (quote yes-or-no-p))
;; These three disable attempts to make emacs more windows-like:
(setq cua-enable-cua-keys nil)
(setq shift-select-mode nil)
(setq delete-selection-mode nil)

;; Performs programme mode indent prior to aligning.
(setq align-indent-before-aligning t)
;; Delete all white space on backspace
(setq backward-delete-char-untabify-method t)
;; Parenthesis matching
(setq blink-matching-paren-on-screen t)
(show-paren-mode 1)
(setq require-final-newline t)
;; Fill puts two spaces after a colon
(setq colon-double-space t)
;; comment region comments out empty lines
(setq comment-empty-lines t)
;; Put 1 space between comment markers and code/text.
(setq comment-padding 1)
;; Comments can span lines
(setq comment-style (quote multi-line))
;; Indent inserts spaces always; never tabs.
(setq indent-tabs-mode nil)
;; ctrl-k kills whole line, including newline character.
(setq kill-whole-line t)
;; ctrl-k yanks read only text (DWIM rather than error)
(setq kill-read-only-ok t)
;; Highlight all search matches
(setq lazy-highlight-max-at-a-time nil)
;; searches ignore case
(setq case-fold-search t)
(setq show-trailing-whitespace t)
;; Config for recentf
(require 'recentf)
;; enable recent files mode.
(recentf-mode t)
;; 50 files ought to be enough.
(setq recentf-max-saved-items 50)

(defun ido-recentf-open ()
  "Use `ido-completing-read' to \\[find-file] a recent file"
  (interactive)
  (if (find-file (ido-completing-read "Find recent file: " recentf-list))
      (message "Opening file...")
    (message "Aborting")))
;; End config for recentf

;; Launch eshell at startup:
(add-hook 'emacs-startup-hook 'eshell)

;; Fix for emacs 24 -> 25 migration issue
(modify-all-frames-parameters '((horizontal-scroll-bars . nil)))
#+END_SRC

* Additional functions

#+BEGIN_SRC emacs-lisp

(defun generate-temp-buffer ()
  (interactive)
  (switch-to-buffer (make-temp-name "temp-")))

#+END_SRC

* Global keyboard shortcuts

#+BEGIN_SRC emacs-lisp

;;; Global key bindings (some duplicates to account for OS X intercepting some
;;; and preventing them being seen by emacs):

(global-set-key [M-left]  'backward-sentence)
(global-set-key [M-right] 'forward-sentence)
(global-set-key [M-up]    'beginning-of-defun)
(global-set-key [M-down]  'end-of-defun)

(global-set-key [C-left]  'backward-word)
(global-set-key [C-right] 'forward-word)
(global-set-key [C-up]    'beginning-of-line)
(global-set-key [C-down]  'end-of-line)

(global-set-key [S-insert] 'insert-file)

(global-set-key [f1]    'find-file-at-point)
(global-set-key [f9]    'find-file-at-point)
(global-set-key [pause] 'toggle-read-only)
(global-set-key [f10] 'toggle-read-only)

(global-set-key [f5]  'bookmark-set-no-overwrite)
(global-set-key [f8]  'bookmark-jump)

(global-set-key [f6]  'execute-extended-command)
(global-set-key [f7]  'buffer-menu)

(global-set-key [f9]  'flycheck-next-error)
(global-set-key [f10]  'flycheck-mode)
(global-set-key [S-f9]  'flycheck-previous-error)

(global-set-key [C-tab] 'other-window)
(global-set-key [M-delete] 'kill-word)

(global-set-key [insert] 'abbrev-mode)
(global-set-key [f12] 'abbrev-mode)

(global-set-key [print]  'ps-print-buffer-with-faces)

(global-set-key "\M-?" 'hippie-expand)

;; multiple cursors config:
(require 'multiple-cursors)
(global-set-key (kbd "C-c m c") 'mc/edit-lines)
(global-set-key (kbd "C-c m >") 'mc/mark-next-like-this)
(global-set-key (kbd "C-c m <") 'mc/mark-previous-like-this)
(global-set-key (kbd "C-c m A") 'mc/mark-all-like-this)
(global-set-key (kbd "C-S-<mouse-1>") 'mc/add-cursor-on-click)
;; get rid of `find-file-read-only' and replace it with something
;; more useful.
(global-set-key (kbd "C-x C-r") 'ido-recentf-open)
;; disable C-x C-c as quit.  Instead, save all buffers with attached files:
(global-set-key (kbd "C-x C-c") 'save-some-buffers)

#+END_SRC

* Python configuration

#+BEGIN_SRC emacs-lisp

;;; Python setup

(elpy-enable)
(when (require 'flycheck nil t)
  (setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
  (add-hook 'elpy-mode-hook 'flycheck-mode))

;; enable autopep8 formatting on save
;; (require 'py-autopep8)
;; (add-hook 'elpy-mode-hook 'py-autopep8-enable-on-save)

;; Use ipython for shell
;; See: https://elpy.readthedocs.io/en/latest/ide.html#interpreter-setup
;; (setq python-shell-interpreter "ipython"
;;      python-shell-interpreter-args "-i --simple-prompt")

;; Use jupyter for shell
;; See: https://elpy.readthedocs.io/en/latest/ide.html#interpreter-setup
(setq python-shell-interpreter "jupyter"
      python-shell-interpreter-args "console --simple-prompt"
      python-shell-prompt-detect-failure-warning nil)
(add-to-list 'python-shell-completion-native-disabled-interpreters
             "jupyter")

(setq python-check-command (executable-find "flake8"))
;; onetwo means single line docstring has quotes in same line; multi-line
;; docstrings have quotes on separate lines.
(setq python-fill-docstring-style (quote onetwo))

;; Fix for pdb (see
;; https://github.com/jorgenschaefer/elpy/wiki/FAQ#q-how-do-i-use-pdb-with-elpy
;; )
(setq gud-pdb-command-name "python -m pdb")

#+END_SRC
